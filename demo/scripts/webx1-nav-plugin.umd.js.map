{"version":3,"file":"webx1-nav-plugin.umd.js","sources":["../lib/index.js"],"sourcesContent":["const PLUGIN = \"webx1NavPlugin\";\n\nconst defaultOptions = {\n  activeClassName: \"active\",\n  historyKey: `${PLUGIN}History`,\n};\n\nconst install = (app, options) => {\n  let opts = Object.assign({}, defaultOptions, options);\n\n  let origRouteInit = app.routeInit;\n  let origUnmountRoute = app.unmountRoute;\n  let origBoot = app.boot;\n\n  let rootEl = opts.scope ? document.querySelector(opts.scope) : app.el;\n\n  app.routeInit = async (route, state) => {\n    let origRoute = app._currentRoute;\n    try {\n      await origRouteInit.call(app, route, state);\n    } catch (err) {\n      console.error(`[${PLUGIN}] Init route failed!`);\n      opts.onPluginFailed ? opts.onPluginFailed(err) : null;\n    }\n    // This plugin requires valid routes\n    if (!app.routes || Object.keys(app.routes) === 0) {\n      return;\n    }\n\n    const routeMap = Object.keys(app.routes).reduce((prev, curr) => {\n      let rt = app.routes[curr];\n      if (rt.name) {\n        prev[rt.name] = {\n          root: rt.root,\n          path: curr,\n          activeClass: rt.activeClass || opts.activeClassName,\n        };\n      }\n      return prev;\n    }, {});\n\n    let links = [].slice.call(rootEl.querySelectorAll(\"a[data-route]\"));\n    links.forEach((anchor) => {\n      let routeName = anchor.dataset[\"route\"];\n      let current = routeMap[routeName];\n      if (!current) {\n        return;\n      }\n      // Already bound\n      if (anchor.dataset[\"isBound\"]) {\n        return;\n      }\n\n      anchor.dataset[\"activeClass\"] =\n        current.activeClass || opts.activeClassName;\n\n      anchor.addEventListener(\"click\", (e) => {\n        // In case the data attribute was removed?\n        let routeName = e.target.dataset[\"route\"];\n        if (!routeName) {\n          return;\n        }\n\n        e.preventDefault();\n        let { path, activeClass, root } = routeMap[routeName];\n        if (path) {\n          // Push history and navigate to route\n          let href = e.target.href;\n          let currPath = href.replace(window.location.origin, \"\");\n          window.history.pushState({}, currPath, href);\n          app.navigate(e.target.pathname);\n\n          // Add history\n          let history = app.getState(opts.historyKey) || [];\n          history.push({\n            path: e.target.pathname,\n            route: routeName,\n            fromRoute: app.routes[origRoute] ? app.routes[origRoute].name : origRoute,\n            timestamp: Date.now(),\n          });\n          app.setState(opts.historyKey, history);\n          if (opts.session) {\n              sessionStorage.setItem(opts.historyKey, JSON.stringify(history));\n          }\n\n          // Highlight\n          let anchorEl = root\n            ? rootEl.querySelector(`[data-route=\"${root}\"]`)\n            : e.target;\n          if (anchorEl) {\n            let cls = activeClass || opts.activeClassName;\n\n            anchorEl.dataset[\"activeClass\"] = cls;\n            anchorEl.classList.add(cls);\n          }\n        }\n      });\n\n      if (opts.onPrefetch && typeof opts.onPrefetch === 'function') {\n        anchor.addEventListener(\"mouseenter\", (e) => {\n            let routeName = e.target.dataset[\"route\"];\n            if (!routeName) {\n                return;\n            }\n            let { path } = routeMap[routeName];\n            opts.onPrefetch(app.routes[path], routeName, path);\n        });\n      }\n\n      anchor.dataset[\"isBound\"] = true;\n    });\n  };\n\n  app.unmountRoute = (route, state) => {\n    try {\n      origUnmountRoute.call(app, route, state);\n    } catch (err) {\n      console.error(`[${PLUGIN}] Unmount route failed!`, err);\n      opts.onPluginFailed ? opts.onPluginFailed(err) : null;\n    }\n\n    [].slice.call(rootEl.querySelectorAll(\"a[data-route]\")).forEach((link) => {\n      let cls = link.dataset[\"activeClass\"] || opts.activeClassName;\n      link.classList.remove(cls);\n    });\n  };\n\n  app.boot = async () => {\n    await origBoot.call(app);\n\n    let currentRoute = app.routes[app._currentRoute];\n\n    let history = [\n        {\n          path: window.location.pathname,\n          route: currentRoute ? currentRoute.name : null,\n          fromRoute: null,\n          timestamp: Date.now(),\n        },\n      ]\n\n    if (opts.session) {\n        let sessionHistory = sessionStorage.getItem(opts.historyKey);\n        if (sessionHistory) {\n            history = [...JSON.parse(sessionHistory), ...history];\n        }\n    }\n\n    app.setState(opts.historyKey, history);\n\n    if (currentRoute) {\n      let routeName = currentRoute.root ? currentRoute.root : currentRoute.name;\n      let anchor = rootEl.querySelector(`[data-route=\"${routeName}\"]`);\n      let cls = currentRoute.activeClass || opts.activeClassName;\n      if (anchor) {\n        anchor.classList.add(cls);\n        anchor.dataset[\"activeClass\"] = cls;\n      }\n    }\n  };\n\n  // Installed callback\n  if (opts.installed && typeof opts.installed === 'function') {\n      opts.installed()\n  }\n\n  // API\n  return {\n    getRouteElements: () => {\n      return [].slice.call(rootEl.querySelectorAll(\"[data-route]\"));\n    },\n    getRouteHistory: () => {\n      return app.getState(opts.historyKey);\n    },\n    clearRouteHistory: (refresh) => {\n      app.setState(opts.historyKey, []);\n      if (opts.session) {\n        sessionStorage.removeItem(opts.historyKey);\n      }\n      if (refresh) {\n        app.refresh();\n      }\n    }\n  }\n};\n\nexport default {\n  name: PLUGIN,\n  global: \"$\",\n  namespace: \"nav\",\n  install,\n};\n"],"names":["PLUGIN","defaultOptions","activeClassName","historyKey","name","global","namespace","install","app","options","opts","Object","assign","origRouteInit","routeInit","origUnmountRoute","unmountRoute","origBoot","boot","rootEl","scope","document","querySelector","el","route","state","routes","keys","routeMap","reduce","prev","curr","rt","root","path","activeClass","slice","call","querySelectorAll","forEach","anchor","current","dataset","addEventListener","e","routeName","target","preventDefault","href","currPath","replace","window","location","origin","history","pushState","navigate","pathname","getState","push","fromRoute","origRoute","timestamp","Date","now","setState","session","sessionStorage","setItem","JSON","stringify","anchorEl","cls","classList","add","onPrefetch","_currentRoute","body","recover","result","then","err","console","error","onPluginFailed","link","remove","currentRoute","sessionHistory","getItem","parse","installed","getRouteElements","getRouteHistory","clearRouteHistory","refresh","removeItem"],"mappings":"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"}